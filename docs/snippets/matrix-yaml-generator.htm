<h2 style="color:#1e88e5; display: flex; align-items: center; gap: 10px;">
  <img src="/assets/yaml-generator-apollo-logo-small.png" alt="Apollo Automation Logo" style="height: 32px;">
  Apollo Automation M-1 LED Matrix YAML Generator
</h2>
<p style="font-size: 1rem; color: #333;">Use this generator to build a fully templated <code>rest_command</code> for your Apollo Automation M-1 Matrix display. Each segment can show real-time data from Home Assistant.</p>

<div style="background: #e3f2fd; border: 1px solid #1e88e5; border-radius: 8px; padding: 1em; margin: 1em 0;">
  <h3 style="color:#1e88e5; margin-top: 0;">üîç How to Find Entity IDs</h3>
  <p style="margin-bottom: 0.5em;"><strong>Method 1 - Developer Tools:</strong></p>
  <ol style="margin: 0 0 1em 1.5em;">
    <li>In Home Assistant, go to <strong>Developer Tools</strong> ‚Üí <strong>States</strong></li>
    <li>Use the search box to find your device/sensor</li>
    <li>Copy the <strong>Entity ID</strong> (e.g., <code>sensor.living_room_temperature</code>)</li>
  </ol>
  <p style="margin-bottom: 0.5em;"><strong>Method 2 - Settings:</strong></p>
  <ol style="margin: 0 0 1em 1.5em;">
    <li>Go to <strong>Settings</strong> ‚Üí <strong>Devices & Services</strong> ‚Üí <strong>Entities</strong></li>
    <li>Search for your device or use filters</li>
    <li>Click on the entity to see its full ID</li>
  </ol>
  <p style="margin-bottom: 0.5em;"><strong>Method 3 - Device Page (Easiest):</strong></p>
  <ol style="margin: 0 0 1em 1.5em;">
    <li>Go to <strong>Settings</strong> ‚Üí <strong>Devices & Services</strong> ‚Üí <strong>Devices</strong></li>
    <li>Click on your device</li>
    <li>All entity IDs for that device will be listed</li>
  </ol>
  <p style="margin: 0; font-size: 0.9em; color: #666;"><strong>üí° Tip:</strong> Entity IDs follow the format <code>domain.device_name</code> (like <code>sensor.outdoor_temperature</code> or <code>weather.home</code>)</p>
</div>

<style>
  form, fieldset, input, select, textarea, button { font-family: inherit; font-size: 1rem; }
  fieldset { background: #f9f9f9; border: 1px solid #cce0ff; border-radius: 8px; padding: 1em; margin-bottom: 1em; }
  legend { color: #1e88e5; font-weight: bold; padding: 0 0.5em; }
  label { display: block; margin: 0.5em 0 0.25em; font-weight: 500; color: #1e88e5; }
  input, select, textarea { width: 100%; padding: 0.5em; border: 1px solid #ccc; border-radius: 6px; box-sizing: border-box; }
  button { background-color: #1e88e5; color: white; border: none; padding: 0.6em 1em; border-radius: 6px; cursor: pointer; margin-top: 1em; }
  button:hover { background-color: #0d6fd3; }
  pre { background: #1e1e1e; color: #dcdcdc; padding: 1em; border-radius: 8px; overflow: auto; font-size: 0.85rem; white-space: pre-wrap; word-wrap: break-word; }
  .copy-button { margin-top: 0.5em; margin-bottom: 1em; }
</style>

<form id="entity-form">
  <fieldset>
    <legend style="color:#1e88e5;">Device Configuration</legend>
    <label>Apollo Matrix URL:
      <input type="text" id="matrix-url" value="http://apollo-matrix.local" placeholder="e.g., http://192.168.1.100">
    </label>
    <p style="font-size: 0.9em; color: #666; margin: 0.5em 0 0 0;">
      üí° Enter your Apollo Matrix device's IP or hostname. <a href="https://wiki.apolloautomation.com/products/m1/troubleshooting/m1-find-ip-address-and-hostname/" target="_blank" style="color:#1e88e5;">Help</a>
    </p>
  </fieldset>
  <div id="entity-entries"></div>
</form>

<h3 style="color:#1e88e5;">üìù Generated YAML:</h3>
<pre id="output"></pre>
<button class="copy-button" onclick="copyYAML()">üìã Copy to Clipboard</button>

<script>
(function() {
  'use strict';

  function dataTypeLabel(type) {
    const labels = {
      temperature: 'Temp',
      feels_like: 'Feels Like',
      humidity: 'Humidity',
      pressure: 'Pressure',
      weather_condition: 'Weather',
      co2: 'CO2',
      voc: 'VOC',
      pm25: 'PM2.5',
      lock: 'Lock',
      ping: 'Ping',
      alarm: 'Alarm',
      motion: 'Motion',
      door: 'Door',
      light: 'Light',
      battery: 'Battery',
      power: 'Power'
    };
    return labels[type] || '';
  }

  function formatDataType(entity, dataType, tempUnit = "F") {
    if (!entity) return '';
    switch (dataType) {
      case "temperature":
        return tempUnit === "C"
          ? `{{ state_attr('${entity}','temperature') | round(1) }}C`
          : `{{ state_attr('${entity}','temperature') | round(0) | int }}F`;
      case "humidity":
        return `{{ state_attr('${entity}','humidity') | round(0) | int }}%`;
      case "pressure":
        return `{{ state_attr('${entity}','pressure') | round(1) }}`;
      case "weather_condition":
        return `{{ states('${entity}') | title }}`;
      case "feels_like":
        return tempUnit === "C"
          ? `{{ states('${entity}') | round(1) }}C`
          : `{{ states('${entity}') | round(0) | int }}F`;
      case "co2":
      case "voc":
        return `{{ states('${entity}') | int }}ppm`;
      case "pm25":
        return `{{ states('${entity}') | round(1) }}Œºg/m¬≥`;
      case "ping":
        return `{{ states('${entity}') | float | round(0) | int }}ms`;
      case "alarm":
        return `{{ states('${entity}') | title }}`;
      case "motion":
        return `{{ states('${entity}') == 'on' and 'Motion' or 'Clear' }}`;
      case "light":
        return `{{ states('${entity}') | round(0) | int }}lx`;
      case "battery":
        return `{{ states('${entity}') | round(0) | int }}%`;
      case "power":
        return `{{ states('${entity}') | round(1) }}W`;
      default:
        return '';
    }
  }

  function deriveName(entity) {
    return entity.split('.').pop()
      .replace(/_lock$/, '')
      .replace(/_sensor$/, '')
      .replace(/_/g, ' ')
      .replace(/\b\w/g, m => m.toUpperCase());
  }

  function initializeGenerator() {
    const defaultFX = 122;
    const defaultConfigs = [
      { primary: "temperature", primaryEntity: "weather.nowcast", secondary: "feels_like", secondaryEntity: "sensor.feels_like", tempUnit: "F" },
      { primary: "lock",        primaryEntity: "lock.front_door_lock", secondary: "door",      secondaryEntity: "binary_sensor.front_door_sensor_contact", tempUnit: "F" },
      { primary: "co2",         primaryEntity: "sensor.brandon_air_1_co2", secondary: "voc",       secondaryEntity: "sensor.brandon_air_1_sen55_voc",       tempUnit: "F" },
      { primary: "ping",        primaryEntity: "sensor.1_1_1_1_round_trip_time_average", secondary: "alarm", secondaryEntity: "alarm_control_panel.alarmo",    tempUnit: "F" }
    ];

    const output   = document.getElementById("output");
    const entries  = document.getElementById("entity-entries");
    const urlInput = document.getElementById("matrix-url");
    if (!output || !entries || !urlInput) return;
    if (entries.hasChildNodes()) return;

    defaultConfigs.forEach((def, i) => {
      const fs = document.createElement("fieldset");
      fs.innerHTML = `
        <legend>Segment ${i}</legend>
        <label>Primary Data Type:
          <select name="primary" data-id="${i}">
            ${["temperature","humidity","pressure","weather_condition","feels_like","co2","voc","pm25","lock","ping","alarm","motion","door","light","battery","power","custom"]
              .map(v => `<option value="${v}"${def.primary===v?' selected':''}>${dataTypeLabel(v) || v}</option>`)
              .join('')}
          </select>
        </label>
        <label>Primary Entity ID:
          <input type="text" name="primaryEntity" value="${def.primaryEntity}" data-id="${i}">
        </label>
        <label>Secondary Data Type:
          <select name="secondary" data-id="${i}">
            ${["none","temperature","humidity","pressure","weather_condition","feels_like","co2","voc","pm25","lock","ping","alarm","motion","door","light","battery","power","custom"]
              .map(v => `<option value="${v}"${def.secondary===v?' selected':''}>${v}</option>`)
              .join('')}
          </select>
        </label>
        <label class="secondary-entity" style="display:${def.secondary!=='none'?'block':'none'};">
          Secondary Entity ID:
          <input type="text" name="secondaryEntity" value="${def.secondaryEntity}" data-id="${i}">
        </label>
        <label class="temp-unit" style="display:${/^(temperature|feels_like)$/.test(def.primary)||/^(temperature|feels_like)$/.test(def.secondary)?'block':'none'};">
          Temperature Unit:
          <select name="tempunit" data-id="${i}">
            <option value="F"${def.tempUnit==='F'?' selected':''}>Fahrenheit</option>
            <option value="C"${def.tempUnit==='C'?' selected':''}>Celsius</option>
          </select>
        </label>
        <label class="custom-template" style="display:${(def.primary==='custom'||def.secondary==='custom')?'block':'none'};">
          Custom Template:
          <textarea name="custom" data-id="${i}"></textarea>
        </label>
      `;
      entries.appendChild(fs);
    });

    entries.querySelectorAll("input, select, textarea").forEach(el => {
      el.addEventListener("input", updateYAML);
      el.addEventListener("change", updateYAML);
    });
    urlInput.addEventListener("input", updateYAML);
    urlInput.addEventListener("change", updateYAML);

    function updateYAML() {
      const blocks = Array.from(entries.querySelectorAll("fieldset")).map((fs, i) => {
        const pType   = fs.querySelector("select[name=primary]").value;
        const pEntRaw = fs.querySelector("input[name=primaryEntity]").value.trim();
        const sType   = fs.querySelector("select[name=secondary]").value;
        const sEntRaw = fs.querySelector("input[name=secondaryEntity]").value.trim();
        const unit    = fs.querySelector("select[name=tempunit]")?.value || "F";
        const custom  = fs.querySelector("textarea[name=custom]").value.trim();

        const pEnt = pEntRaw || defaultConfigs[i].primaryEntity;
        const sEnt = sType !== "none" ? (sEntRaw || defaultConfigs[i].secondaryEntity) : "";

        const parts = [];

        // Primary
        if (pType === "lock") {
          const name = deriveName(pEnt);
          parts.push(`{{ states('${pEnt}') == 'locked' and '${name} Locked' or '${name} Unlocked' }}`);
        } else if (pType === "custom" && custom) {
          parts.push(custom);
        } else {
          const label = dataTypeLabel(pType);
          const val   = formatDataType(pEnt, pType, unit);
          if (label === "Temp" || label === "Alarm" || label === "CO2") {
            parts.push(`${label} ${val}`);
          } else {
            parts.push(`${label}: ${val}`);
          }
        }

        // Secondary
        if (sType === "door") {
          const name = deriveName(sEnt);
          parts.push(`{{ states('${sEnt}') == 'on' and '${name} Sensor Open' or '${name} Sensor Closed' }}`);
        } else if (sType === "voc" && pType === "co2") {
          parts.push(`VOC ${formatDataType(sEnt, "voc", unit)}`);
        } else if (sType !== "none") {
          const label = dataTypeLabel(sType);
          const val   = formatDataType(sEnt, sType, unit);
          if (label === "Temp" || label === "Alarm" || label === "CO2") {
            parts.push(`${label} ${val}`);
          } else {
            parts.push(`${label}: ${val}`);
          }
        }

        const line = parts.join(" ").replace(/"/g, '\\"');

        return [
          '          {',
          `            "id": ${i},`,
          `            "fx": ${defaultFX},`,
          `            "n": "${line}"`,
          '          }'
        ].join('\n');
      });

      output.textContent = `rest_command:
  matrix_all_segments:
    url: ${urlInput.value.trim()}/json/state
    content_type: 'application/json'
    verify_ssl: false
    method: 'post'
    timeout: 20
    payload: >
      {
        "seg":[
${blocks.join(',\n')}
        ]
      }`;
    }

    window.copyYAML = function() {
      if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(output.textContent).catch(() => {});
      }
    };

    updateYAML();
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeGenerator);
  } else {
    initializeGenerator();
  }
})();
</script>