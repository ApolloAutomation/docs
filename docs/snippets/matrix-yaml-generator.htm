<h2 style="color:#1e88e5; display: flex; align-items: center; gap: 10px;">
  <img src="/assets/yaml-generator-apollo-logo-small.png" alt="Apollo Automation Logo" style="height: 32px;">
  Apollo Automation M-1 LED Matrix YAML Generator
</h2>
<p style="font-size: 1rem; color: #333;">Use this generator to build a fully templated <code>rest_command</code> for your Apollo Automation M-1 Matrix display. Each segment can show real-time data from Home Assistant.</p>

<div style="background: #e3f2fd; border: 1px solid #1e88e5; border-radius: 8px; padding: 1em; margin: 1em 0;">
  <h3 style="color:#1e88e5; margin-top: 0;">üîç How to Find Entity IDs</h3>
  <p style="margin-bottom: 0.5em;"><strong>Method 1 - Developer Tools:</strong></p>
  <ol style="margin: 0 0 1em 1.5em;">
    <li>In Home Assistant, go to <strong>Developer Tools</strong> ‚Üí <strong>States</strong></li>
    <li>Use the search box to find your device/sensor</li>
    <li>Copy the <strong>Entity ID</strong> (e.g., <code>sensor.living_room_temperature</code>)</li>
  </ol>
  
  <p style="margin-bottom: 0.5em;"><strong>Method 2 - Settings:</strong></p>
  <ol style="margin: 0 0 1em 1.5em;">
    <li>Go to <strong>Settings</strong> ‚Üí <strong>Devices & Services</strong> ‚Üí <strong>Entities</strong></li>
    <li>Search for your device or use filters</li>
    <li>Click on the entity to see its full ID</li>
  </ol>
  
  <p style="margin-bottom: 0.5em;"><strong>Method 3 - Device Page (Easiest):</strong></p>
  <ol style="margin: 0 0 1em 1.5em;">
    <li>Go to <strong>Settings</strong> ‚Üí <strong>Devices & Services</strong> ‚Üí <strong>Devices</strong></li>
    <li>Click on your device</li>
    <li>All entity IDs for that device will be listed</li>
  </ol>
  
  <p style="margin: 0; font-size: 0.9em; color: #666;"><strong>üí° Tip:</strong> Entity IDs follow the format <code>domain.device_name</code> (like <code>sensor.outdoor_temperature</code> or <code>weather.home</code>)</p>
</div>

<style>
  form, fieldset, input, select, textarea, button {
    font-family: inherit;
    font-size: 1rem;
  }

  fieldset {
    background: #f9f9f9;
    border: 1px solid #cce0ff;
    border-radius: 8px;
    padding: 1em;
    margin-bottom: 1em;
  }

  legend {
    color: #1e88e5;
    font-weight: bold;
    padding: 0 0.5em;
  }

  label {
    display: block;
    margin: 0.5em 0 0.25em;
    font-weight: 500;
    color: #1e88e5;
  }

  input, select, textarea {
    width: 100%;
    max-width: 100%;
    padding: 0.5em;
    border: 1px solid #ccc;
    border-radius: 6px;
    box-sizing: border-box;
  }

  button {
    background-color: #1e88e5;
    color: white;
    border: none;
    padding: 0.6em 1em;
    border-radius: 6px;
    cursor: pointer;
    margin-top: 1em;
  }

  button:hover {
    background-color: #0d6fd3;
  }

  pre {
    background: #1e1e1e;
    color: #dcdcdc;
    padding: 1em;
    border-radius: 8px;
    overflow: auto;
    font-size: 0.85rem;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  .copy-button {
    margin-top: 0.5em;
    margin-bottom: 1em;
  }
</style>

<form id="entity-form">
  <fieldset>
    <legend style="color:#1e88e5;">Device Configuration</legend>
    <label>Apollo Matrix URL:
      <input type="text" id="matrix-url" value="http://apollo-matrix.local" placeholder="e.g., http://192.168.1.100 or http://apollo-matrix.local">
    </label>
    <p style="font-size: 0.9em; color: #666; margin: 0.5em 0 0 0;">
      üí° Enter your Apollo Matrix device's IP address or hostname. If you need help finding the IP or hostname, <a href="https://wiki.apolloautomation.com/products/m1/troubleshooting/m1-find-ip-address-and-hostname/" target="_blank" style="color: #1e88e5; text-decoration: underline;">click here</a>.
    </p>
  </fieldset>
  <div id="entity-entries"></div>
</form>

<h3 style="color:#1e88e5;">üìù Generated YAML:</h3>
<pre id="output"></pre>
<button class="copy-button" onclick="copyYAML()">üìã Copy to Clipboard</button>

<script>
(function() {
  'use strict';
  
  function initializeGenerator() {
    console.log("Initializing Apollo Matrix YAML Generator...");
    
    const defaultFX = 122;
    const output = document.getElementById("output");
    const entries = document.getElementById("entity-entries");
    const urlInput = document.getElementById("matrix-url");
    
    if (!output || !entries || !urlInput) {
      console.error("Required elements not found");
      return;
    }

    // Prevent double initialization
    if (entries.hasChildNodes()) {
      console.log("Generator already initialized");
      return;
    }

    const defaultConfigs = [
      { type: "weather", entity: "weather.nowcast", secondary: "sensor.feels_like" },
      { type: "lock", entity: "lock.front_door_lock", secondary: "" },
      { type: "air", entity: "sensor.brandon_air_1_co2", secondary: "sensor.brandon_air_1_sen55_voc" },
      { type: "ping_alarm", entity: "sensor.1_1_1_1_round_trip_time_average", secondary: "alarm_control_panel.alarmo" }
    ];

    console.log("Populating segments...");

    for (let i = 0; i < 4; i++) {
      const def = defaultConfigs[i];
      const fieldset = document.createElement("fieldset");
      fieldset.innerHTML = `
        <legend>Segment ${i}</legend>
        <label>Format:
          <select name="type" data-id="${i}">
            <option value="weather"${def.type === 'weather' ? ' selected' : ''}>Weather + Feels Like</option>
            <option value="lock"${def.type === 'lock' ? ' selected' : ''}>Lock (Locked/Unlocked)</option>
            <option value="air"${def.type === 'air' ? ' selected' : ''}>CO2 + VOC</option>
            <option value="ping_alarm"${def.type === 'ping_alarm' ? ' selected' : ''}>Ping + Alarm</option>
            <option value="custom">Custom Jinja</option>
          </select>
        </label>
        <label>Primary Entity ID:
          <input type="text" name="entity" value="${def.entity}" placeholder="e.g., sensor.temp_living_room" data-id="${i}">
        </label>
        <label class="secondary-entity" style="display: none;">Secondary Entity ID:
          <input type="text" name="secondary" value="${def.secondary || ''}" placeholder="e.g., sensor.feels_like" data-id="${i}">
        </label>
        <label class="temp-unit" style="display: none;">Temperature Unit:
          <select name="tempunit" data-id="${i}">
            <option value="F">Fahrenheit (¬∞F)</option>
            <option value="C">Celsius (¬∞C)</option>
          </select>
        </label>
        <label>Custom Template (only used for 'Custom Jinja'):
          <textarea name="custom" rows="2" cols="60" data-id="${i}" placeholder="Enter full Jinja template here"></textarea>
        </label>
      `;
      entries.appendChild(fieldset);
    }

    entries.querySelectorAll("input, select, textarea").forEach(el => {
      el.addEventListener("input", updateYAML);
      el.addEventListener("change", updateYAML);
      
      // Handle type changes to show/hide secondary entity field
      if (el.name === "type") {
        el.addEventListener("change", function() {
          const fieldset = el.closest("fieldset");
          const secondaryLabel = fieldset.querySelector(".secondary-entity");
          const secondaryInput = fieldset.querySelector('input[name="secondary"]');
          const tempUnitLabel = fieldset.querySelector(".temp-unit");
          
          if (el.value === "weather") {
            secondaryLabel.style.display = "block";
            tempUnitLabel.style.display = "block";
            if (!secondaryInput.value) {
              secondaryInput.value = "sensor.feels_like";
            }
          } else if (el.value === "air" || el.value === "ping_alarm") {
            secondaryLabel.style.display = "block";
            tempUnitLabel.style.display = "none";
            
            if (el.value === "air" && !secondaryInput.value) {
              secondaryInput.value = "sensor.brandon_air_1_sen55_voc";
            } else if (el.value === "ping_alarm" && !secondaryInput.value) {
              secondaryInput.value = "alarm_control_panel.alarmo";
            }
          } else {
            secondaryLabel.style.display = "none";
            tempUnitLabel.style.display = "none";
          }
          updateYAML();
        });

    // Add event listener for URL input
    urlInput.addEventListener("input", updateYAML);
    urlInput.addEventListener("change", updateYAML);
        
        // Trigger initial show/hide
        el.dispatchEvent(new Event('change'));
      }
    });

    function formatTemplate(entity, type, secondaryEntity = "", tempUnit = "F") {
      switch (type) {
        case "weather":
          const feelsLike = secondaryEntity || "sensor.feels_like";
          if (tempUnit === "C") {
            return `{{ state_attr('${entity}','temperature') | round(1) }}C {{ states('${entity}') | title }} FL: {{ states('${feelsLike}') | round(1) }}C`;
          } else {
            return `{{ state_attr('${entity}','temperature') }}F {{ states('${entity}') | title }} FL: {{ states('${feelsLike}') | round(0) | int }}F`;
          }
        case "lock":
          return `{{ states('${entity}') == 'locked' and 'Front Door Locked' or 'Front Door Unlocked' }}`;
        case "air":
          const vocSensor = secondaryEntity || "sensor.brandon_air_1_sen55_voc";
          return `CO2 {{ states('${entity}') | int }}ppm VOC {{ states('${vocSensor}') | int }}ppm`;
        case "ping_alarm":
          const alarmPanel = secondaryEntity || "alarm_control_panel.alarmo";
          return `Ping {{ states('${entity}') | float | round(0) | int }}ms {{ states('${alarmPanel}') | title }}`;
        default:
          return "";
      }
    }

    function updateYAML() {
      console.log("Updating YAML...");
      const segments = Array.from(entries.querySelectorAll("fieldset")).map((fs, i) => {
        const type = fs.querySelector('select[name="type"]').value;
        const entity = fs.querySelector('input[name="entity"]').value.trim();
        const secondary = fs.querySelector('input[name="secondary"]').value.trim();
        const tempUnit = fs.querySelector('select[name="tempunit"]')?.value || "F";
        const custom = fs.querySelector('textarea[name="custom"]').value.trim();
        if (!entity && type !== 'custom') return null;

        let template = "";
        if (type === "custom" && custom) {
          template = custom;
        } else {
          template = formatTemplate(entity, type, secondary, tempUnit);
        }

        template = template.replace(/"/g, '\\"');
        return `      {
        "id": ${i},
        "fx": ${defaultFX},
        "n": "${template}"
      }`;
      }).filter(Boolean);

      const yaml = `rest_command:
  matrix_all_segments:
    url: ${urlInput.value.trim()}/json/state
    content_type: 'application/json'
    verify_ssl: false
    method: 'post'
    timeout: 20
    payload: >
      {
        "seg":[
${segments.join(",\n")}
        ]
      }`;

      output.textContent = yaml;
    }

    // Make copyYAML function global
    window.copyYAML = function() {
      if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(output.textContent).then(() => {
          alert("YAML copied to clipboard!");
        }).catch(err => {
          console.error('Failed to copy: ', err);
          fallbackCopy();
        });
      } else {
        fallbackCopy();
      }
    };

    function fallbackCopy() {
      const textArea = document.createElement("textarea");
      textArea.value = output.textContent;
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      try {
        document.execCommand('copy');
        alert("YAML copied to clipboard!");
      } catch (err) {
        alert("Copy failed. Please manually select and copy the text.");
      }
      document.body.removeChild(textArea);
    }

    updateYAML();
    console.log("Generator initialized successfully");
  }

  // Multiple initialization strategies
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeGenerator);
  } else {
    initializeGenerator();
  }

  // Fallback initialization
  if (typeof window !== 'undefined') {
    window.addEventListener('load', function() {
      setTimeout(initializeGenerator, 100);
    });
  }
})();
</script>