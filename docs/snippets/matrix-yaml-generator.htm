```html
<h2 style="color:#1e88e5; display: flex; align-items: center; gap: 10px;">
  <img src="/assets/yaml-generator-apollo-logo-small.png" alt="Apollo Automation Logo" style="height: 32px;">
  Apollo Automation M-1 LED Matrix YAML Generator
</h2>
<p style="font-size: 1rem; color: #333;">Use this generator to build a fully templated <code>rest_command</code> for your Apollo Automation M-1 Matrix display. Each segment can show real-time data from Home Assistant.</p>

<div style="background: #e3f2fd; border: 1px solid #1e88e5; border-radius: 8px; padding: 1em; margin: 1em 0;">
  <h3 style="color:#1e88e5; margin-top: 0;">üîç How to Find Entity IDs</h3>
  <p style="margin-bottom: 0.5em;"><strong>Method 1 - Developer Tools:</strong></p>
  <ol style="margin: 0 0 1em 1.5em;">
    <li>In Home Assistant, go to <strong>Developer Tools</strong> ‚Üí <strong>States</strong></li>
    <li>Use the search box to find your device/sensor</li>
    <li>Copy the <strong>Entity ID</strong> (e.g., <code>sensor.living_room_temperature</code>)</li>
  </ol>
  
  <p style="margin-bottom: 0.5em;"><strong>Method 2 - Settings:</strong></p>
  <ol style="margin: 0 0 1em 1.5em;">
    <li>Go to <strong>Settings</strong> ‚Üí <strong>Devices & Services</strong> ‚Üí <strong>Entities</strong></li>
    <li>Search for your device or use filters</li>
    <li>Click on the entity to see its full ID</li>
  </ol>
  
  <p style="margin-bottom: 0.5em;"><strong>Method 3 - Device Page (Easiest):</strong></p>
  <ol style="margin: 0 0 1em 1.5em;">
    <li>Go to <strong>Settings</strong> ‚Üí <strong>Devices & Services</strong> ‚Üí <strong>Devices</strong></li>
    <li>Click on your device</li>
    <li>All entity IDs for that device will be listed</li>
  </ol>
  
  <p style="margin: 0; font-size: 0.9em; color: #666;"><strong>üí° Tip:</strong> Entity IDs follow the format <code>domain.device_name</code> (like <code>sensor.outdoor_temperature</code> or <code>weather.home</code>)</p>
</div>

<style>
  form, fieldset, input, select, textarea, button {
    font-family: inherit;
    font-size: 1rem;
  }

  fieldset {
    background: #f9f9f9;
    border: 1px solid #cce0ff;
    border-radius: 8px;
    padding: 1em;
    margin-bottom: 1em;
  }

  legend {
    color: #1e88e5;
    font-weight: bold;
    padding: 0 0.5em;
  }

  label {
    display: block;
    margin: 0.5em 0 0.25em;
    font-weight: 500;
    color: #1e88e5;
  }

  input, select, textarea {
    width: 100%;
    max-width: 100%;
    padding: 0.5em;
    border: 1px solid #ccc;
    border-radius: 6px;
    box-sizing: border-box;
  }

  button {
    background-color: #1e88e5;
    color: white;
    border: none;
    padding: 0.6em 1em;
    border-radius: 6px;
    cursor: pointer;
    margin-top: 1em;
  }

  button:hover {
    background-color: #0d6fd3;
  }

  pre {
    background: #1e1e1e;
    color: #dcdcdc;
    padding: 1em;
    border-radius: 8px;
    overflow: auto;
    font-size: 0.85rem;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  .copy-button {
    margin-top: 0.5em;
    margin-bottom: 1em;
  }
</style>

<form id="entity-form">
  <fieldset>
    <legend style="color:#1e88e5;">Device Configuration</legend>
    <label>Apollo Matrix URL:
      <input type="text" id="matrix-url" value="http://apollo-matrix.local" placeholder="e.g., http://192.168.1.100 or http://apollo-matrix.local">
    </label>
    <p style="font-size: 0.9em; color: #666; margin: 0.5em 0 0 0;">
      üí° Enter your Apollo Matrix device's IP address or hostname. If you need help finding the IP or hostname, <a href="https://wiki.apolloautomation.com/products/m1/troubleshooting/m1-find-ip-address-and-hostname/" target="_blank" style="color: #1e88e5; text-decoration: underline;">click here</a>.
    </p>
  </fieldset>
  <div id="entity-entries"></div>
</form>

<h3 style="color:#1e88e5;">üìù Generated YAML:</h3>
<pre id="output"></pre>
<button class="copy-button" onclick="copyYAML()">üìã Copy to Clipboard</button>

<script>
(function() {
  'use strict';
  
  function initializeGenerator() {
    console.log("Initializing Apollo Matrix YAML Generator...");
    
    const defaultFX = 122;
    const output     = document.getElementById("output");
    const entries    = document.getElementById("entity-entries");
    const urlInput   = document.getElementById("matrix-url");
    
    if (!output || !entries || !urlInput) {
      console.error("Required elements not found");
      return;
    }

    // Prevent double initialization
    if (entries.hasChildNodes()) {
      console.log("Generator already initialized");
      return;
    }

    const defaultConfigs = [
      { primary: "temperature", primaryEntity: "weather.nowcast", secondary: "feels_like", secondaryEntity: "sensor.feels_like", tempUnit: "F" },
      { primary: "lock",        primaryEntity: "lock.front_door_lock", secondary: "none",      secondaryEntity: "",                   tempUnit: "F" },
      { primary: "co2",         primaryEntity: "sensor.brandon_air_1_co2", secondary: "voc",       secondaryEntity: "sensor.brandon_air_1_sen55_voc", tempUnit: "F" },
      { primary: "ping",        primaryEntity: "sensor.1_1_1_1_round_trip_time_average", secondary: "alarm", secondaryEntity: "alarm_control_panel.alarmo", tempUnit: "F" }
    ];

    console.log("Populating segments...");

    for (let i = 0; i < 4; i++) {
      const def = defaultConfigs[i];
      const fieldset = document.createElement("fieldset");
      fieldset.innerHTML = `
        <legend>Segment ${i}</legend>
        <label>Primary Data Type:
          <select name="primary" data-id="${i}">
            <option value="temperature"${def.primary === 'temperature' ? ' selected' : ''}>Temperature</option>
            <option value="humidity"${def.primary === 'humidity' ? ' selected' : ''}>Humidity</option>
            <option value="pressure"${def.primary === 'pressure' ? ' selected' : ''}>Pressure</option>
            <option value="weather_condition"${def.primary === 'weather_condition' ? ' selected' : ''}>Weather Condition</option>
            <option value="feels_like"${def.primary === 'feels_like' ? ' selected' : ''}>Feels Like Temperature</option>
            <option value="co2"${def.primary === 'co2' ? ' selected' : ''}>CO2</option>
            <option value="voc"${def.primary === 'voc' ? ' selected' : ''}>VOC</option>
            <option value="pm25"${def.primary === 'pm25' ? ' selected' : ''}>PM2.5</option>
            <option value="lock"${def.primary === 'lock' ? ' selected' : ''}>Lock Status</option>
            <option value="ping"${def.primary === 'ping' ? ' selected' : ''}>Ping Time</option>
            <option value="alarm"${def.primary === 'alarm' ? ' selected' : ''}>Alarm Status</option>
            <option value="motion"${def.primary === 'motion' ? ' selected' : ''}>Motion Sensor</option>
            <option value="door"${def.primary === 'door' ? ' selected' : ''}>Door Sensor</option>
            <option value="light"${def.primary === 'light' ? ' selected' : ''}>Light Level</option>
            <option value="battery"${def.primary === 'battery' ? ' selected' : ''}>Battery Level</option>
            <option value="power"${def.primary === 'power' ? ' selected' : ''}>Power Usage</option>
            <option value="custom"${def.primary === 'custom' ? ' selected' : ''}>Custom Text/Value</option>
          </select>
        </label>
        <label>Primary Entity ID:
          <input type="text" name="primaryEntity" value="${def.primaryEntity}" placeholder="e.g., sensor.living_room_temperature" data-id="${i}">
        </label>
        <label>Secondary Data Type:
          <select name="secondary" data-id="${i}">
            <option value="none"${def.secondary === 'none' ? ' selected' : ''}>None</option>
            <option value="temperature"${def.secondary === 'temperature' ? ' selected' : ''}>Temperature</option>
            <option value="humidity"${def.secondary === 'humidity' ? ' selected' : ''}>Humidity</option>
            <option value="pressure"${def.secondary === 'pressure' ? ' selected' : ''}>Pressure</option>
            <option value="weather_condition"${def.secondary === 'weather_condition' ? ' selected' : ''}>Weather Condition</option>
            <option value="feels_like"${def.secondary === 'feels_like' ? ' selected' : ''}>Feels Like Temperature</option>
            <option value="co2"${def.secondary === 'co2' ? ' selected' : ''}>CO2</option>
            <option value="voc"${def.secondary === 'voc' ? ' selected' : ''}>VOC</option>
            <option value="pm25"${def.secondary === 'pm25' ? ' selected' : ''}>PM2.5</option>
            <option value="lock"${def.secondary === 'lock' ? ' selected' : ''}>Lock Status</option>
            <option value="ping"${def.secondary === 'ping' ? ' selected' : ''}>Ping Time</option>
            <option value="alarm"${def.secondary === 'alarm' ? ' selected' : ''}>Alarm Status</option>
            <option value="motion"${def.secondary === 'motion' ? ' selected' : ''}>Motion Sensor</option>
            <option value="door"${def.secondary === 'door' ? ' selected' : ''}>Door Sensor</option>
            <option value="light"${def.secondary === 'light' ? ' selected' : ''}>Light Level</option>
            <option value="battery"${def.secondary === 'battery' ? ' selected' : ''}>Battery Level</option>
            <option value="power"${def.secondary === 'power' ? ' selected' : ''}>Power Usage</option>
            <option value="custom"${def.secondary === 'custom' ? ' selected' : ''}>Custom Text/Value</option>
          </select>
        </label>
        <label class="secondary-entity" style="display: ${def.secondary !== 'none' ? 'block' : 'none'};">
          Secondary Entity ID:
          <input type="text" name="secondaryEntity" value="${def.secondaryEntity}" placeholder="e.g., sensor.feels_like" data-id="${i}">
        </label>
        <label class="temp-unit" style="display: ${(def.primary === 'temperature' || def.primary === 'feels_like' || def.secondary === 'temperature' || def.secondary === 'feels_like') ? 'block' : 'none'};">
          Temperature Unit:
          <select name="tempunit" data-id="${i}">
            <option value="F"${def.tempUnit === 'F' ? ' selected' : ''}>Fahrenheit (¬∞F)</option>
            <option value="C"${def.tempUnit === 'C' ? ' selected' : ''}>Celsius (¬∞C)</option>
          </select>
        </label>
        <label class="custom-template" style="display: ${(def.primary === 'custom' || def.secondary === 'custom') ? 'block' : 'none'};">
          Custom Template:
          <textarea name="custom" rows="2" cols="60" data-id="${i}" placeholder="Enter custom Jinja template (e.g., {{ states('sensor.custom') }} units)"></textarea>
        </label>
      `;
      entries.appendChild(fieldset);

      // Always show Segment 1's secondary-entity field:
      if (i === 1) {
        const secLabel = fieldset.querySelector('.secondary-entity');
        secLabel.style.display = 'block';
      }
    }

    // Attach listeners and YAML-generation logic (unchanged from original):
    entries.querySelectorAll("input, select, textarea").forEach(el => {
      el.addEventListener("input", updateYAML);
      el.addEventListener("change", updateYAML);
    });
    urlInput.addEventListener("input", updateYAML);
    urlInput.addEventListener("change", updateYAML);

    function formatDataType(entity, dataType, tempUnit = "F") {
      if (!entity.trim()) return "";
      switch (dataType) {
        case "temperature":
          return tempUnit === "C"
            ? `{{ state_attr('${entity}','temperature') | round(1) }}C`
            : `{{ state_attr('${entity}','temperature') | round(0) | int }}F`;
        case "humidity":
          return `{{ state_attr('${entity}','humidity') | round(0) | int }}%`;
        case "pressure":
          return `{{ state_attr('${entity}','pressure') | round(1) }}`;
        case "weather_condition":
          return `{{ states('${entity}') | title }}`;
        case "feels_like":
          return tempUnit === "C"
            ? `{{ states('${entity}') | round(1) }}C`
            : `{{ states('${entity}') | round(0) | int }}F`;
        case "co2":
        case "voc":
          return `{{ states('${entity}') | int }}ppm`;
        case "pm25":
          return `{{ states('${entity}') | round(1) }}Œºg/m¬≥`;
        case "lock":
          return `{{ states('${entity}') == 'locked' and 'Locked' or 'Unlocked' }}`;
        case "ping":
          return `{{ states('${entity}') | float | round(0) | int }}ms`;
        case "alarm":
          return `{{ states('${entity}') | title }}`;
        case "motion":
          return `{{ states('${entity}') == 'on' and 'Motion' or 'Clear' }}`;
        case "door":
          return `{{ states('${entity}') == 'on' and 'Open' or 'Closed' }}`;
        case "light":
          return `{{ states('${entity}') | round(0) | int }}lx`;
        case "battery":
          return `{{ states('${entity}') | round(0) | int }}%`;
        case "power":
          return `{{ states('${entity}') | round(1) }}W`;
        default:
          return "";
      }
    }

    function getSeparator(primaryType, secondaryType) {
      if ((primaryType === "co2" && secondaryType === "voc") ||
          (primaryType === "voc" && secondaryType === "co2") ||
          (primaryType === "ping" && secondaryType === "alarm") ||
          (primaryType === "alarm" && secondaryType === "ping")) {
        return " ";
      }
      if ((primaryType === "temperature" || primaryType === "feels_like") &&
          (secondaryType === "temperature" || secondaryType === "feels_like")) {
        return " FL: ";
      }
      return " ";
    }

    function updateYAML() {
      console.log("Updating YAML...");
      const segments = Array.from(entries.querySelectorAll("fieldset")).map((fs, i) => {
        const pType = fs.querySelector('select[name="primary"]').value;
        const pEntity = fs.querySelector('input[name="primaryEntity"]').value.trim();
        const sType = fs.querySelector('select[name="secondary"]').value;
        const sEntity = fs.querySelector('input[name="secondaryEntity"]').value.trim();
        const unit  = fs.querySelector('select[name="tempunit"]')?.value || "F";
        const custom = fs.querySelector('textarea[name="custom"]').value.trim();

        if (!pEntity && pType !== 'custom') return null;

        let tpl = "";
        if (pType === "custom" && custom) {
          tpl = custom;
        } else if (sType === "custom" && custom) {
          tpl = formatDataType(pEntity, pType, unit) + " " + custom;
        } else {
          const pPart = formatDataType(pEntity, pType, unit);
          const sPart = (sType !== "none" && sEntity)
                      ? formatDataType(sEntity, sType, unit)
                      : "";
          tpl = sPart
            ? pPart + getSeparator(pType, sType) + sPart
            : pPart;
        }
        tpl = tpl.replace(/"/g, '\\"');
        return `      {
        "id": ${i},
        "fx": ${defaultFX},
        "n": "${tpl}"
      }`;
      }).filter(Boolean);

      output.textContent = `rest_command:
  matrix_all_segments:
    url: ${urlInput.value.trim()}/json/state
    content_type: 'application/json'
    verify_ssl: false
    method: 'post'
    timeout: 20
    payload: >
      {
        "seg":[
${segments.join(",\n")}
        ]
      }`;
    }

    window.copyYAML = function() {
      if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(output.textContent).then(() => {
          alert("YAML copied to clipboard!");
        }).catch(() => {
          fallbackCopy();
        });
      } else {
        fallbackCopy();
      }
    };

    function fallbackCopy() {
      const ta = document.createElement("textarea");
      ta.value = output.textContent;
      document.body.appendChild(ta);
      ta.select();
      try { document.execCommand('copy'); alert("Copied!"); }
      catch { alert("Copy failed."); }
      document.body.removeChild(ta);
    }

    updateYAML();
    console.log("Generator initialized successfully");
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeGenerator);
  } else {
    initializeGenerator();
  }
})();
</script>
```
