<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Apollo Automation M-1 LED Matrix YAML Generator</title>
</head>
<body>

<h2 style="color:#1e88e5; display: flex; align-items: center; gap: 10px;">
  <img src="/assets/yaml-generator-apollo-logo-small.png" alt="Apollo Automation Logo" style="height: 32px;">
  Apollo Automation M-1 LED Matrix YAML Generator
</h2>
<p style="font-size: 1rem; color: #333;">Use this generator to build a fully templated <code>rest_command</code> for your Apollo Automation M-1 Matrix display. Each segment can show real-time data from Home Assistant.</p>

<div style="background: #e3f2fd; border: 1px solid #1e88e5; border-radius: 8px; padding: 1em; margin: 1em 0;">
  <h3 style="color:#1e88e5; margin-top: 0;">üîç How to Find Entity IDs</h3>
  <p style="margin-bottom: 0.5em;"><strong>Method 1 - Developer Tools:</strong></p>
  <ol style="margin: 0 0 1em 1.5em;">
    <li>In Home Assistant, go to <strong>Developer Tools</strong> ‚Üí <strong>States</strong></li>
    <li>Use the search box to find your device/sensor</li>
    <li>Copy the <strong>Entity ID</strong> (e.g., <code>sensor.living_room_temperature</code>)</li>
  </ol>
  <p style="margin-bottom: 0.5em;"><strong>Method 2 - Settings:</strong></p>
  <ol style="margin: 0 0 1em 1.5em;">
    <li>Go to <strong>Settings</strong> ‚Üí <strong>Devices & Services</strong> ‚Üí <strong>Entities</strong></li>
    <li>Search for your device or use filters</li>
    <li>Click on the entity to see its full ID</li>
  </ol>
  <p style="margin-bottom: 0.5em;"><strong>Method 3 - Device Page (Easiest):</strong></p>
  <ol style="margin: 0 0 1em 1.5em;">
    <li>Go to <strong>Settings</strong> ‚Üí <strong>Devices & Services</strong> ‚Üí <strong>Devices</strong></li>
    <li>Click on your device</li>
    <li>All entity IDs for that device will be listed</li>
  </ol>
  <p style="margin: 0; font-size: 0.9em; color: #666;"><strong>üí° Tip:</strong> Entity IDs follow the format <code>domain.device_name</code> (like <code>sensor.outdoor_temperature</code> or <code>weather.home</code>)</p>
</div>

<form id="entity-form">
  <fieldset>
    <legend style="color:#1e88e5;">Device Configuration</legend>
    <label>Apollo Matrix URL:
      <input type="text" id="matrix-url" value="http://apollo-matrix.local" placeholder="e.g., http://192.168.1.100 or http://apollo-matrix.local">
    </label>
    <p style="font-size: 0.9em; color: #666; margin: 0.5em 0 0 0;">
      üí° Enter your Apollo Matrix device's IP address or hostname. If you need help finding the IP or hostname, <a href="https://wiki.apolloautomation.com/products/m1/troubleshooting/m1-find-ip-address-and-hostname/" target="_blank" style="color: #1e88e5; text-decoration: underline;">click here</a>.
    </p>
  </fieldset>
  <div id="entity-entries"></div>
</form>

<h3 style="color:#1e88e5;">üìù Generated YAML:</h3>
<pre id="output"></pre>
<button class="copy-button" onclick="copyYAML()">üìã Copy to Clipboard</button>

<script>
(function() {
  'use strict';
  const output = document.getElementById("output");
  const entries = document.getElementById("entity-entries");
  const urlInput = document.getElementById("matrix-url");

  const defaultConfigs = [
    { primary: "temperature", primaryEntity: "weather.nowcast", secondary: "feels_like", secondaryEntity: "sensor.feels_like", tempUnit: "F" },
    { primary: "lock", primaryEntity: "lock.front_door_lock", secondary: "none", secondaryEntity: "", tempUnit: "F" },
    { primary: "co2", primaryEntity: "sensor.brandon_air_1_co2", secondary: "voc", secondaryEntity: "sensor.brandon_air_1_sen55_voc", tempUnit: "F" },
    { primary: "ping", primaryEntity: "sensor.1_1_1_1_round_trip_time_average", secondary: "alarm", secondaryEntity: "alarm_control_panel.alarmo", tempUnit: "F" }
  ];

  for (let i = 0; i < 4; i++) {
    const def = defaultConfigs[i];
    const fieldset = document.createElement("fieldset");
    fieldset.innerHTML = `
      <legend>Segment ${i}</legend>
      <label>Primary Data Type:
        <input type="text" name="primary" value="${def.primary}" data-id="${i}">
      </label>
      <label>Primary Entity ID:
        <input type="text" name="primaryEntity" value="${def.primaryEntity}" placeholder="e.g., sensor.living_room_temperature" data-id="${i}">
      </label>
      <label>Secondary Data Type:
        <input type="text" name="secondary" value="${def.secondary}" data-id="${i}">
      </label>
      <label>Secondary Entity ID:
        <input type="text" name="secondaryEntity" value="${def.secondaryEntity}" placeholder="e.g., sensor.feels_like" data-id="${i}">
      </label>
      <label>Temperature Unit:
        <select name="tempunit" data-id="${i}">
          <option value="F"${def.tempUnit === 'F' ? ' selected' : ''}>Fahrenheit (¬∞F)</option>
          <option value="C"${def.tempUnit === 'C' ? ' selected' : ''}>Celsius (¬∞C)</option>
        </select>
      </label>
      <label>Custom Template:
        <textarea name="custom" rows="2" cols="60" data-id="${i}" placeholder="Enter custom Jinja template (e.g., {{ states('sensor.custom') }} units)"></textarea>
      </label>
    `;
    entries.appendChild(fieldset);
  }

  function updateYAML() {
    const defaultFX = 122;
    const segments = Array.from(entries.querySelectorAll("fieldset")).map((fs, i) => {
      const primaryType = fs.querySelector('input[name="primary"]').value;
      const primaryEntity = fs.querySelector('input[name="primaryEntity"]').value.trim();
      const secondaryType = fs.querySelector('input[name="secondary"]').value;
      const secondaryEntity = fs.querySelector('input[name="secondaryEntity"]').value.trim();
      const tempUnit = fs.querySelector('select[name="tempunit"]')?.value || "F";
      const custom = fs.querySelector('textarea[name="custom"]').value.trim();

      if (!primaryEntity && primaryType !== 'custom') return null;

      let template = primaryType + ':' + primaryEntity;
      if (secondaryType !== 'none' && secondaryEntity) {
        template += ' | ' + secondaryType + ':' + secondaryEntity;
      }
      if (custom) {
        template += ' ' + custom;
      }

      template = template.replace(/"/g, '\\"');
      return `      {
        "id": ${i},
        "fx": ${defaultFX},
        "n": "${template}"
      }`;
    }).filter(Boolean);

    const yaml = `rest_command:
  matrix_all_segments:
    url: ${urlInput.value.trim()}/json/state
    content_type: 'application/json'
    verify_ssl: false
    method: 'post'
    timeout: 20
    payload: >
      {
        "seg":[
${segments.join(",\n")}
        ]
      }`;

    output.textContent = yaml;
  }

  entries.querySelectorAll("input, select, textarea").forEach(el => {
    el.addEventListener("input", updateYAML);
    el.addEventListener("change", updateYAML);
  });
  urlInput.addEventListener("input", updateYAML);
  urlInput.addEventListener("change", updateYAML);

  window.copyYAML = function() {
    if (navigator.clipboard && navigator.clipboard.writeText) {
      navigator.clipboard.writeText(output.textContent).then(() => {
        alert("YAML copied to clipboard!");
      }).catch(err => {
        console.error('Failed to copy: ', err);
        fallbackCopy();
      });
    } else {
      fallbackCopy();
    }
  };

  function fallbackCopy() {
    const textArea = document.createElement("textarea");
    textArea.value = output.textContent;
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    try {
      document.execCommand('copy');
      alert("YAML copied to clipboard!");
    } catch (err) {
      alert("Copy failed. Please manually select and copy the text.");
    }
    document.body.removeChild(textArea);
  }

  updateYAML();
})();
</script>

<style>
  form, fieldset, input, select, textarea, button {
    font-family: inherit;
    font-size: 1rem;
  }
  fieldset {
    background: #f9f9f9;
    border: 1px solid #cce0ff;
    border-radius: 8px;
    padding: 1em;
    margin-bottom: 1em;
  }
  legend {
    color: #1e88e5;
    font-weight: bold;
    padding: 0 0.5em;
  }
  label {
    display: block;
    margin: 0.5em 0 0.25em;
    font-weight: 500;
    color: #1e88e5;
  }
  input, select, textarea {
    width: 100%;
    max-width: 100%;
    padding: 0.5em;
    border: 1px solid #ccc;
    border-radius: 6px;
    box-sizing: border-box;
  }
  button {
    background-color: #1e88e5;
    color: white;
    border: none;
    padding: 0.6em 1em;
    border-radius: 6px;
    cursor: pointer;
    margin-top: 1em;
  }
  button:hover {
    background-color: #0d6fd3;
  }
  pre {
    background: #1e1e1e;
    color: #dcdcdc;
    padding: 1em;
    border-radius: 8px;
    overflow: auto;
    font-size: 0.85rem;
    white-space: pre-wrap;
    word-wrap: break-word;
  }
  .copy-button {
    margin-top: 0.5em;
    margin-bottom: 1em;
  }
</style>
</body>
</html>
